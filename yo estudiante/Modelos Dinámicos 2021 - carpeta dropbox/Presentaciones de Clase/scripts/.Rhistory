}
#### plot 3
plot(seq(0,ymax,1),seq(0,ymax,1),xlim=c(ymin,ymax),ylim=c(ymin,ymax),type="l",xlab="P(t)",ylab="P(t+1)",main="c) Diagrama de fase")
#phase diagram ( price )
for (i in 2:length(P)){
points(P[i-1],P[i-1])
points(P[i-1],P[i])
segments(P[i-1],P[i-1],P[i-1],P[i],col=rainbow(i))
segments(P[i-1],P[i],P[i],P[i],col=rainbow(i))
}
##### plot 4
plot(Qs[1:length(P)],seq(1,length(P),1),type="l",xlim=c(350,750),xlab="t",lwd=2,col=2,ylab="Qs,Qd",main="d) Cantidad ofertada y demandada")
lines(Qd[1:length(P)],seq(1,length(P),1),type="l",xlab="t",lwd=2,col=4)
#legend ("topright", c ("Qs", "Qd"),col=c(2,4), lwd =c(2,2), cex = 1.5)
source("~/r_14_09_22.R")
par(mfrow = c(2,2))
plot(200:Time,log(YY[200:Time]),type="l",ylim=range(log(YY[200:Time])),col=1,ylab="log(YY)",xlab="t")
plot(200:Time,log(BB[200:Time]),type="l",ylim=range(log(BB[200:Time])),col=1,ylab="log(BB)",xlab="t")
plot(200:Time,lev[200:Time],type="l",ylim=range(lev[200:Time]),col=1,ylab="lev",xlab="t")
plot(200:Time,RR[200:Time],type="l",ylim=range(RR[200:Time]),col=1,ylab="RR",xlab="t")
MC=3
Ni=100
Time=1000
gamma=2#1.1
phi=0.1
Pbar=0.01
#r=0.1
delta=0.05
rbar=0.075
#####
set.seed(15)
#####
A=matrix(data=1,ncol=1,nrow=Ni) # net worth
K=matrix(data=1,ncol=1,nrow=Ni) # net worth
B=matrix(data=0,ncol=1,nrow=Ni) # net worth
I=matrix(data=0,ncol=1,nrow=Ni) # net worth
P=matrix(data=0,ncol=1,nrow=Ni) # net worth
Y=matrix(data=0,ncol=1,nrow=Ni) # net worth
#int=matrix(data=0,ncol=1,nrow=Ni) # net worth
Z=matrix(data=2*runif(Ni)+Pbar,ncol=1,nrow=Ni) # net worth
YY=matrix(data=0,ncol=MC,nrow=Time) # net worth
AA=matrix(data=0,ncol=MC,nrow=Time) # net worth
BB=matrix(data=0,ncol=MC,nrow=Time) # net worth
r=matrix(data=0,ncol=MC,nrow=Time) # net worth
lev=AA/BB
RR=matrix(data=0,ncol=MC,nrow=Time) # net worth
### sequence of events
# we over-write values for each agent
# main program
for(mc in 1:MC){
A=matrix(data=1,ncol=1,nrow=Ni) # net worth
K=matrix(data=1,ncol=1,nrow=Ni) # capital
B=matrix(data=0,ncol=1,nrow=Ni) # debt
I=matrix(data=0,ncol=1,nrow=Ni) # investment
P=matrix(data=0,ncol=1,nrow=Ni) # price
Y=matrix(data=0,ncol=1,nrow=Ni) # production
#  int=matrix(data=0,ncol=1,nrow=Ni) # interest rates
Z=matrix(data=2*runif(Ni)+Pbar,ncol=1,nrow=Ni) # net worth
for (t in 2:Time){
rbar=ifelse(t<500,0.075,0.1)
I=gamma*Z #investment choice
I[Z<0]=0
K=(1-delta)*K+I #capital accumulation
Y=phi*K #production
B=K-A #debt
B[B<0]=0 #self-financed firms
P=2*runif(Ni)+Pbar #stochastic price
r=rbar+rbar*(B/A)^rbar
#  int=r*B
Z=P*Y-r*K #profit
A=A+Z #net
Z[A<0]=0 #entry condition
K[A<0]=1 #entry condition
A[A<0]=1 #entry-exit process
YY[t,mc]=sum(Y) #aggr production
AA[t,mc]=sum(A) #net worth
BB[t,mc]=sum(B) #debt
#  lev[t]=BB[t]/AA[t]
RR[t,mc]=sum(int)/sum(B)
}
}
plot(2:Time,YY[2:Time],type="l",ylim=range(YY[2:Time]),col=1,ylab="YY",xlab="t")
plot(2:Time,BB[2:Time],type="l",ylim=range(BB[2:Time]),col=1,ylab="BB",xlab="t")
### sequence of events
# we over-write values for each agent
# main program
for(mc in 1:MC){
A=matrix(data=1,ncol=1,nrow=Ni) # net worth
K=matrix(data=1,ncol=1,nrow=Ni) # capital
B=matrix(data=0,ncol=1,nrow=Ni) # debt
I=matrix(data=0,ncol=1,nrow=Ni) # investment
P=matrix(data=0,ncol=1,nrow=Ni) # price
Y=matrix(data=0,ncol=1,nrow=Ni) # production
#  int=matrix(data=0,ncol=1,nrow=Ni) # interest rates
Z=matrix(data=2*runif(Ni)+Pbar,ncol=1,nrow=Ni) # net worth
for (t in 2:Time){
#  rbar=ifelse(t<500,0.075,0.1)
I=gamma*Z #investment choice
I[Z<0]=0
K=(1-delta)*K+I #capital accumulation
Y=phi*K #production
B=K-A #debt
B[B<0]=0 #self-financed firms
P=2*runif(Ni)+Pbar #stochastic price
r=rbar+rbar*(B/A)^rbar
#  int=r*B
Z=P*Y-r*K #profit
A=A+Z #net
Z[A<0]=0 #entry condition
K[A<0]=1 #entry condition
A[A<0]=1 #entry-exit process
YY[t,mc]=sum(Y) #aggr production
AA[t,mc]=sum(A) #net worth
BB[t,mc]=sum(B) #debt
#  lev[t]=BB[t]/AA[t]
RR[t,mc]=sum(int)/sum(B)
}
}
plot(2:Time,YY[2:Time],type="l",ylim=range(YY[2:Time]),col=1,ylab="YY",xlab="t")
plot(2:Time,BB[2:Time],type="l",ylim=range(BB[2:Time]),col=1,ylab="BB",xlab="t")
plot(2:Time,YY[2:Time],type="l",ylim=range(YY[2:Time]),col=1,ylab="YY",xlab="t")
plot(2:Time,BB[2:Time],type="l",ylim=range(BB[2:Time]),col=1,ylab="BB",xlab="t")
MC=3
Ni=100
Time=1000
gamma=2#1.1
phi=0.1
Pbar=0.01
#r=0.1
delta=0.05
rbar=0.075
#####
set.seed(15)
#####
A=matrix(data=1,ncol=1,nrow=Ni) # net worth
K=matrix(data=1,ncol=1,nrow=Ni) # net worth
B=matrix(data=0,ncol=1,nrow=Ni) # net worth
I=matrix(data=0,ncol=1,nrow=Ni) # net worth
P=matrix(data=0,ncol=1,nrow=Ni) # net worth
Y=matrix(data=0,ncol=1,nrow=Ni) # net worth
#int=matrix(data=0,ncol=1,nrow=Ni) # net worth
Z=matrix(data=2*runif(Ni)+Pbar,ncol=1,nrow=Ni) # net worth
YY=matrix(data=0,ncol=MC,nrow=Time) # net worth
AA=matrix(data=0,ncol=MC,nrow=Time) # net worth
BB=matrix(data=0,ncol=MC,nrow=Time) # net worth
r=matrix(data=0,ncol=MC,nrow=Time) # net worth
lev=AA/BB
RR=matrix(data=0,ncol=MC,nrow=Time) # net worth
### sequence of events
# we over-write values for each agent
# main program
for(mc in 1:MC){
A=matrix(data=1,ncol=1,nrow=Ni) # net worth
K=matrix(data=1,ncol=1,nrow=Ni) # capital
B=matrix(data=0,ncol=1,nrow=Ni) # debt
I=matrix(data=0,ncol=1,nrow=Ni) # investment
P=matrix(data=0,ncol=1,nrow=Ni) # price
Y=matrix(data=0,ncol=1,nrow=Ni) # production
#  int=matrix(data=0,ncol=1,nrow=Ni) # interest rates
Z=matrix(data=2*runif(Ni)+Pbar,ncol=1,nrow=Ni) # net worth
for (t in 2:Time){
#  rbar=ifelse(t<500,0.075,0.1)
I=gamma*Z #investment choice
I[Z<0]=0
K=(1-delta)*K+I #capital accumulation
Y=phi*K #production
B=K-A #debt
B[B<0]=0 #self-financed firms
P=2*runif(Ni)+Pbar #stochastic price
r=rbar+rbar*(B/A)^rbar
#  int=r*B
Z=P*Y-r*K #profit
A=A+Z #net
Z[A<0]=0 #entry condition
K[A<0]=1 #entry condition
A[A<0]=1 #entry-exit process
YY[t,mc]=sum(Y) #aggr production
AA[t,mc]=sum(A) #net worth
BB[t,mc]=sum(B) #debt
#  lev[t]=BB[t]/AA[t]
RR[t,mc]=sum(int)/sum(B)
}
}
plot(2:Time,YY[2:Time],type="l",ylim=range(YY[2:Time]),col=1,ylab="YY",xlab="t")
dev.off()
plot(2:Time,YY[2:Time,1],type = "l",ylim=range(0,max(YY)),col=1,ylab="YY",xlab = "t")
plot(2:Time,log(YY[2:Time]),type="l",ylim=range(log(YY[2:Time])),col=1,ylab="log(YY)",xlab="t")
for (j in 2:MC){
lines(2:Time,log(YY[2:Time]),ylim=range(log(YY[2:Time])),col=j,ylab="log(YY)",xlab="t")
}
plot(2:Time,YY[2:Time,1],type = "l",ylim=range(0,max(YY)),col=1,ylab="YY",xlab = "t")
for (j in 2:MC){
lines(2:Time,YY[2:Time,j],type = "l",ylim=range(0,max(YY)),col=j,ylab="YY",xlab = "t")
}
source("~/r_15_09_22.R")
plot(2:Time,YY[2:Time,1],type = "l",ylim=range(0,max(YY)),col=1,ylab="YY",xlab = "t")
for (j in 2:MC){
lines(2:Time,YY[2:Time,j],type = "l",ylim=range(0,max(YY)),col=j,ylab="YY",xlab = "t")
}
source("~/r_15_09_22.R")
r
plot(r)
source("~/r_15_09_22.R")
source("~/r_15_09_22.R")
source("~/r_15_09_22.R")
source("~/r_15_09_22.R")
source("~/r_15_09_22.R")
plot(YYup)
plot(YYdown)
library(jsonlite)
library(glue)
library(tidyverse)
library(dplyr)
library(tidyquant)
library(xts)
library(ggplot2)
library(hrbrthemes)
install.packages('tidyquant')
install.packages("tidyquant")
install.packages('hrbthemes')
retreive_daily_data <- function(pair, filename) {
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
columnNames <- c('unix', 'low', 'high', 'open', 'close', glue('{pair} volume'))
mydata <- fromJSON(url) #retrieve the data from the JSON url
df <- as.data.frame(mydata) #define the dataframe for the assigned values
colnames(df) <- columnNames  # rename the columns
write.csv(df, file = filename)
}
retrieve_daily_data
retrieve_daily_data <- function(pair, filename) {
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
columnNames <- c('unix', 'low', 'high', 'open', 'close', glue('{pair} volume'))
mydata <- fromJSON(url) #retrieve the data from the JSON url
df <- as.data.frame(mydata) #define the dataframe for the assigned values
colnames(df) <- columnNames  # rename the columns
write.csv(df, file = filename)
}
retrieve_daily_data
newPair <- "ADA-USD"
fileName <- glue("dailyData{newPair}.csv")  #Assigning the name for each value
library(glue)
fileName <- glue("dailyData{newPair}.csv")  #Assigning the name for each value
runFunc <- retreive_daily_data(newPair, filename = fileName)
library(jsonlite)
library(glue)
library(tidyverse)
library(dplyr)
library(tidyquant)
library(xts)
library(ggplot2)
library(hrbrthemes)
runFunc <- retreive_daily_data(newPair, filename = fileName)
runFunc
getwd()
ADA <- read.csv("dailyDataADA-USD.csv")
library(anytime)
Date <- anydate(ADA$unix)
ADA$unix <- Date
ADA <- rename(ADA, 'Date'='unix')
head(ADA, 5)
ADA[ ,c('X')] <- list(NULL)
library(coinmarketcapr)
install.packages("coinmarketcapr")
library(coinmarketcapr)
plot_top_currencies(3)
plot_top_currencies()
market_today <- get_marketcap_ticker_all()
get_valid_currencies()
get_global_marketcap()
apikey="854f0abc-78e0-4152-ba00-1042703afae6"
get_global_marketcap()
require("pbapply");require("data.table");require("httr");require("rvest");require("dplyr")
require("lubridate");require("jsonlite")
PASS <- new.env()
assign("apikey","854f0abc-78e0-4152-ba00-1042703afae6",envir = PASS)
# HELPER FUNCTION - Converts timestamp to local timestamp
# format TimeZone
fixTZ = function(timeStamp){
tmDIFF = round(as.numeric(difftime(Sys.time(),
lubridate::force_tz(with_tz(Sys.time(),tz="UTC")),
units = "hours")),0)
as.POSIXct(timeStamp + hours(tmDIFF), tz= Sys.timezone())
}
# *******************************************************************************************************
# https://coinmarketcap.com/api/documentation/v1/#operation/getV1FiatMap
getFiat = function()
{
# url
url = paste0("https://pro-api.coinmarketcap.com/v1/fiat/map")
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
fiat <- dt[["data"]] %>% as.data.frame()
fiat
}
tmp <- getFiat()
# *********************************************************************************
# Turn it into a function - gets latest listings
# Pass in max number of listings (limit) & fiat currency to use (ex.USD)
getLatestListings = function(limit,fiat)
{
# build URL
url = paste0("https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest",
"?start=1&limit=",limit,"&convert=",fiat)
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
# convert to data frame
bse <- cbind(dt$data$id,
dt$data$name,
dt$data$symbol,
dt$data$slug,
dt$data$date_added,
dt$data$max_supply,
dt$data$circulating_supply,
dt$data$total_supply) %>% as.data.frame
# format column names
colnames(bse) = c("ID","Name","Symbol","Slug","DateAdded","MaxSupply","CirculatingSupply","TotalSupply")
# format DateAdded
bse$DateAdded <- as.Date(bse$DateAdded)
# quote
qte <- dt[["data"]][["quote"]] %>% as.data.frame
qte[[1]]$price              <- qte[[1]]$price %>% round(digits = 4)
qte[[1]]$last_updated       <- as.POSIXct(qte[[1]]$last_updated, format="%Y-%m-%dT%H:%M:%S.000Z")
qte[[1]]$percent_change_1h  <- round(qte[[1]]$percent_change_1h/100,4)
qte[[1]]$percent_change_24h <- round(qte[[1]]$percent_change_24h/100,4)
qte[[1]]$percent_change_7d  <- round(qte[[1]]$percent_change_7d/100,4)
qte[[1]]$percent_change_30d <- round(qte[[1]]$percent_change_30d/100,4)
qte[[1]]$percent_change_60d <- round(qte[[1]]$percent_change_60d/100,4)
qte[[1]]$percent_change_90d <- round(qte[[1]]$percent_change_90d/100,4)
qte[[1]]$market_cap_dominance<-round(qte[[1]]$market_cap_dominance/100,4)
# cbind data & quotes
df <- cbind(bse,qte)
# return table
df
}
# TEST Function
tmp = getLatestListings(limit = 5000, fiat = "USD")
tmp$Name
# *******************************************************************************************************
# https://coinmarketcap.com/api/documentation/v1/#operation/getV1CryptocurrencyQuotesLatest
getLatestQuote= function(symbol, fiat)
{
# build URL
url = paste0("https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest",
"?convert=",fiat,"&symbol=",symbol)
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
# extract quote
qte <- rbindlist(dt$data[[1]]$quote) %>% as.data.frame()
# format column types
qte$price <- round(qte$price, 5)
qte$percent_change_1h <- round(qte$percent_change_1h/100,5)
qte$percent_change_24h <- round(qte$percent_change_24h/100,5)
qte$percent_change_7d <- round(qte$percent_change_7d/100,5)
qte$percent_change_30d <- round(qte$percent_change_30d/100,5)
qte$percent_change_60d <- round(qte$percent_change_60d/100,5)
qte$percent_change_90d <- round(qte$percent_change_90d/100,5)
qte$market_cap_dominance<-round(qte$market_cap_dominance/100,5)
qte$last_updated <- fixTZ(as.POSIXct(qte$last_updated, format="%Y-%m-%dT%H:%M:%S.000Z"))
# add Meta
meta <- as.data.frame(cbind(dt$data[[1]]$id,
dt$data[[1]]$name,
dt$data[[1]]$symbol,
dt$data[[1]]$slug,
dt$data[[1]]$num_market_pairs,
dt$data[[1]]$date_added,
ifelse(is.null(dt$data[[1]]$max_supply), NA,dt$data[[1]]$max_supply),
dt$data[[1]]$circulating_supply,
dt$data[[1]]$total_supply,
dt$data[[1]]$is_active
))
colnames(meta) <- c("id","name","symbol","slug","num_market_pairs",
"date_added","max_supply","circulating_supply",
"total_supply","is_active")
meta$date_added <- fixTZ(as.POSIXct(meta$date_added, format="%Y-%m-%dT%H:%M:%S.000Z"))
# combine meta & qte data
all <- cbind(meta,qte)
# return data
all
}
# TEST Function
tmp1 = getLatestQuote(symbol = "BTC", fiat = "USD")
tmp2 = getLatestQuote(symbol = "BTC", fiat = "CAD")
# call multiple quotes:
symbols = c("BTC","ETH","DOGE","ADA","XTZ","USDC")
qte <- pblapply(as.list(symbols), function(x){
tmp <- try(getLatestQuote(symbol=x, fiat="USD"))
if(!inherits(tmp, 'try-error'))
tmp
})
# row bind data
qte <- rbindlist(qte,use.names = TRUE,fill = TRUE)
# *******************************************************************************************************
# https://coinmarketcap.com/api/documentation/v1/#operation/getV1GlobalmetricsQuotesLatest
getLatestMetrics = function()
{
# build url
url = paste0("https://pro-api.coinmarketcap.com/v1/global-metrics/quotes/latest")
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
# meta
meta <- as.data.frame(cbind(dt$data[1:22]))
# quote data
qte <- rbindlist(dt[["data"]][["quote"]])  %>% t %>% as.data.frame()
removed <- c("defi_volume_24h","defi_volume_24h_reported","defi_24h_percentage_change",
"defi_market_cap","stablecoin_volume_24h","stablecoin_volume_24h_reported",
"stablecoin_24h_percentage_change","stablecoin_market_cap","derivatives_volume_24h",
"derivatives_volume_24h_reported","derivatives_24h_percentage_change")
qte <- as.data.frame(qte)
qte <- as.data.frame(qte[!(rownames(qte) %in% removed),],
row.names= rownames(qte)[!(rownames(qte) %in% removed)])
qte["last_updated",] <- fixTZ(as.POSIXct(qte["last_updated",],format="%Y-%m-%dT%H:%M:%S.%OSZ")) %>%
as.character()
colnames(qte) <- "V1"
ALL <- rbind(meta,qte)
colnames(ALL) <- "Value"
# return df
ALL
}
tmp <- getLatestMetrics()
# *******************************************************************************************************
# https://coinmarketcap.com/api/documentation/v1/#operation/getV1ToolsPriceconversion
cryptoConversionRate = function(amount, fromSymbol, toSymbol)
{
# url
url = paste0("https://pro-api.coinmarketcap.com/v1/tools/price-conversion",
"?amount=",amount,"&symbol=",fromSymbol,"&convert=",toSymbol)
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
fromCrypto <- as.data.frame(cbind(dt$data$id,
dt$data$symbol,
dt$data$name,
dt$data$amount,
dt$data$last_updated))
colnames(fromCrypto) <- c("id","fromSymbol","fromName","amount","last_updated")
fromCrypto$last_updated <- fixTZ(as.POSIXct(fromCrypto$last_updated,
format="%Y-%m-%dT%H:%M:%S.%OSZ")) %>% as.character()
# in case multiple currency conversions
nCurr<- length(dt[["data"]][["quote"]])
tmp <- lapply(as.list(1:nCurr), function(ii){
df <- rbind(dt$data$quote[[ii]]) %>% as.data.frame()
toCurrName <- names(dt$data$quote)[[ii]]
df$toSymbol <- toCurrName
df <- as.data.frame(df[,c("toSymbol","price")])
colnames(df)[2] <- "amount"
df
})
tmp <- do.call(cbind,tmp)
# return conversion(s)
cbind(fromCrypto,tmp)
}
tmp <- cryptoConversionRate(amount=1, fromSymbol = "BTC", toSymbol = "USD")
tmp <- cryptoConversionRate(amount=100, fromSymbol = "USD", toSymbol = "ETH")
tmp <- cryptoConversionRate(amount=1, fromSymbol = "ETH", toSymbol = "ADA")
# *******************************************************************************************************
# https://coinmarketcap.com/api/documentation/v1/#operation/getV1KeyInfo
planInfo = function()
{
# url
url = paste0("https://pro-api.coinmarketcap.com/v1/key/info")
# GET request
pg <- httr::GET(url,httr::add_headers(`Accepts` = 'application/json',
`X-CMC_PRO_API_KEY` = PASS$apikey))
# read in content
dt<- fromJSON(rawToChar(pg$content))
planInfo <- do.call(rbind,dt[["data"]][["plan"]]) %>% as.data.frame()
colnames(planInfo) <- "value"
usage <- do.call(rbind,dt[["data"]][["usage"]]) %>% as.data.frame()
list(planInfo,usage)
}
tmp <- planInfo()
tmp
plot_top_currencies()
bse
fiat
getFiat()
etLatestListings(limit = 5000, fiat = "USD")
getLatestListings(limit = 5000, fiat = "USD")
install.packages("cryptowatchR")
setwd("~/Dropbox/Modelos Dinámicos 2021/Presentaciones de Clase/scripts")
library('igraph')
library('dplyr')
library('magrittr')
library('plot3D')
#     Cargamos el archivo:
segr=read.csv("Segregation2 experiment1-table.csv",sep=",",
stringsAsFactors = FALSE, skip=6, header = T)
colnames(segr)=c("run","density","similar","similar_max","visualization","step","insatisfechos")
#     graficamos en escala logar?tmica
plot(segr$step,segr$insatisfechos,log="xy")
#     analizamos si la cantidad de individuos insatisfechos decae siguiendo una ley potencial
BB=fit_power_law(segr$insatisfechos)
BB$alpha  # valor del par?metro alpha
BB$xmin   # valor m?nimo
BB$KS.p   # p-valor de la prueba K-S, con H0) power law (p-valor > 0.05)
segments(1,BB$xmin,50,BB$xmin, col="red")  #valor a partir del cual se cumple la ley potencial
#     graficamos en escala logar?tmica
plot(segr$step,segr$insatisfechos,log="xy")
